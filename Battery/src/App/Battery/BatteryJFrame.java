/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package App.Battery;

import static App.Battery.DisplayTrayIcon.trayIcon;
import java.awt.Toolkit;
import java.awt.TrayIcon;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import javax.swing.JOptionPane;
import javazoom.jl.player.Player;
import javax.swing.Timer;

/**
 *
 * @author PC
 */
public class BatteryJFrame extends javax.swing.JFrame {

    /**
     * Creates new form BatteryJFrame
     */
    DisplayTrayIcon dti = new DisplayTrayIcon();

    static int counter = 0;            // counter the pc connect the battery or no show message one time 
    static int OfflineCounter10 = 0;   // counter the pc less  than  battery 10 %  show message one time warring
    static int timer = 5;              // counter the pc = 100%  show message every 2 minites  error the disconnect the battery
    static int OfflineCounter50 = 0;   // counter the pc  battery = 50% show message one time
    public File f = new File("Battery.run"); //create Text File to check if the app is run to re run whene windo restart automatic
    public boolean select = false;
    public BatteryJFrame() {
        initComponents();
        setIconImage();
        //cheake if timer is not ruuning 
        if (!t.isRunning()) {
            dti.puMenu.getItem(3).setEnabled(false); //display run
            dti.puMenu.getItem(2).setEnabled(true);  //hide stop
        }
        Battery.SYSTEM_POWER_STATUS batteryStatus = new Battery.SYSTEM_POWER_STATUS();
        Battery.INSTANCE.GetSystemPowerStatus(batteryStatus);
        dti.trayIcon.setToolTip("Version 1.0.0\nBattery Charging Alarm\nBattery charging status : " + batteryStatus.getACLineStatusString() + "\nBattery Life : " + batteryStatus.getBatteryLifePercent() + "\nBattery Left : " + batteryStatus.getBatteryLifeTime() + "");
        try {
            if (f.exists()) {
                //read the file
                FileReader Reader = new FileReader(f);
                //read the line from file 
                BufferedReader bufferedReader = new BufferedReader(Reader);
                String line;
                int index = 1;
                while ((line = bufferedReader.readLine()) != null) {
                    if (!line.equalsIgnoreCase("true")) {
                        index = Integer.valueOf(line);
                    }
                }
                if (index >= 0 && index <= 4) {
                    jComboBox1.setSelectedIndex(index);
                } else {
                    jComboBox1.setSelectedIndex(1);
                }
            }
        } catch (Exception e) {
        }
    }

    public void read() {
        try {
            //checke file is exist or no't
            if (f.exists()) {
                //read the file
                FileReader Reader = new FileReader(f);
                //read the line from file 
                BufferedReader bufferedReader = new BufferedReader(Reader);
                String line = bufferedReader.readLine();
                // System.out.println(bufferedReader.readLine());
                if (line.equalsIgnoreCase("true")) {
                    if (!dti.frame.t.isRunning()) {
                        dti.frame.counter = 1;
                        RunBattery();
                        Battery.SYSTEM_POWER_STATUS batteryStatus = new Battery.SYSTEM_POWER_STATUS();
                        Battery.INSTANCE.GetSystemPowerStatus(batteryStatus);
                        dti.trayIcon.setToolTip("Version 1.0.0\nBattery Charging Alarm\nBattery charging status : " + batteryStatus.getACLineStatusString() + "\nBattery Life : " + batteryStatus.getBatteryLifePercent() + "\nBattery Left : " + batteryStatus.getBatteryLifeTime() + "");
                        dti.frame.FirtsRun = 0;
                        dti.frame.t.start();
                        dti.puMenu.getItem(2).setEnabled(false);
                        dti.puMenu.getItem(3).setEnabled(true);
                    }
                }
                bufferedReader.close();
                Reader.close();
            }
        } catch (Exception e) {

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();

        setTitle("Battery Charging Alarm");
        setFocusCycleRoot(false);
        setFocusable(false);
        setIconImages(null);
        setMaximumSize(new java.awt.Dimension(263, 116));
        setMinimumSize(new java.awt.Dimension(263, 116));
        setName("Jfram"); // NOI18N
        setResizable(false);
        setType(java.awt.Window.Type.POPUP);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setMaximumSize(new java.awt.Dimension(263, 116));
        jPanel1.setMinimumSize(new java.awt.Dimension(263, 116));

        jButton1.setText("Exite");
        jButton1.setToolTipText("Exite");
        jButton1.setActionCommand("jBtnExite");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Battery Charging Alarm");

        jButton2.setText("Run");
        jButton2.setToolTipText("Run");
        jButton2.setActionCommand("jBtnRun");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "one minutes", "Two minutes", "Three minutes", "Four minutes", "Five minutes" }));
        jComboBox1.setSelectedIndex(1);
        jComboBox1.setToolTipText("Alarm Snooze ");
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(47, 47, 47))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(56, 56, 56)
                        .addComponent(jButton2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(16, 16, 16))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    static int FirtsRun;
    int t1 = 0;
    int Alarm_Snooze = 126000;  //tow minutes  2.1 default;
    Timer t = new Timer(18000, new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            t1 += t.getDelay();
            // check the Alarm Snooze
            if (t1 == Alarm_Snooze) {
                timer = 5;
                t1 = 0;
            }
            if (dti.frame.FirtsRun == 1) {
                RunBattery();
            } else {
                dti.frame.FirtsRun = 1;
            }
            Battery.SYSTEM_POWER_STATUS batteryStatus = new Battery.SYSTEM_POWER_STATUS();
            Battery.INSTANCE.GetSystemPowerStatus(batteryStatus);
            dti.trayIcon.setToolTip("Version 1.0.0\nBattery Charging Alarm\nBattery charging status : " + batteryStatus.getACLineStatusString() + "\nBattery Life : " + batteryStatus.getBatteryLifePercent() + "\nBattery Left : " + batteryStatus.getBatteryLifeTime() + "");
        }

    });


    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

    }//GEN-LAST:event_formWindowOpened

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            setVisible(false); // HIde FRame Hewan the Frame Closed

            if (!dti.frame.t.isRunning()) {
                //t.start();
                dti.frame.counter = 1;
                RunBattery();
                Battery.SYSTEM_POWER_STATUS batteryStatus = new Battery.SYSTEM_POWER_STATUS();
                Battery.INSTANCE.GetSystemPowerStatus(batteryStatus);
                dti.trayIcon.setToolTip("Version 1.0.0\nBattery Charging Alarm\nBattery charging status : " + batteryStatus.getACLineStatusString() + "\nBattery Life : " + batteryStatus.getBatteryLifePercent() + "\nBattery Left : " + batteryStatus.getBatteryLifeTime() + "");
                dti.frame.FirtsRun = 0;
                dti.frame.t.start();
                dti.puMenu.getItem(2).setEnabled(false);
                dti.puMenu.getItem(3).setEnabled(true);
                if (!f.exists()) {
                    FileWriter fileWriter = new FileWriter(f);
                    BufferedWriter Writer = new BufferedWriter(fileWriter);
                    Writer.write("true");
                    Writer.close();
                }
                dti.frame.select = false;
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(dti.frame.select){
        f.delete();
        }  
        dti.tray.remove(trayIcon);
        System.exit(0);
        dti.frame.t.stop();
      
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        try {

            // Change Alarm Snooze
            switch (jComboBox1.getSelectedIndex()) {
                case 0:
                    Alarm_Snooze = 54000;
                    //one Minutes 0.9
                    break;
                case 1:
                    Alarm_Snooze = 126000;
                    //tow minutes  2.1
                    break;
                case 2:
                    Alarm_Snooze = 198000;
                    //three minutes 3.3
                    break;
                case 3:
                    Alarm_Snooze = 252000;
                    //four minutes 4.2
                    break;
                case 4:
                    Alarm_Snooze = 306000;
                    //five minutes 5.1
                    break;

            }
            if (f.exists()) {
                BufferedWriter Writer = new BufferedWriter(new FileWriter(f));
                Writer.write("true");
                Writer.newLine();
                Writer.write(String.valueOf(jComboBox1.getSelectedIndex()));
                Writer.flush();
                Writer.close();
                 dti.frame.select = false;
            }
            
            if(!f.exists()){
                BufferedWriter Writer = new BufferedWriter(new FileWriter(f));
                Writer.write("true");
                Writer.newLine();
                Writer.write(String.valueOf(jComboBox1.getSelectedIndex()));
                Writer.flush();
                Writer.close();
                dti.frame.select = true;
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    public void RunBattery() {
        try {
            Battery.SYSTEM_POWER_STATUS batteryStatus = new Battery.SYSTEM_POWER_STATUS();
            Battery.INSTANCE.GetSystemPowerStatus(batteryStatus);
            File pathe = new File("").getAbsoluteFile();

            FileInputStream fileInputStream = new FileInputStream(pathe.toString().concat("\\alarm\\alarm1.mp3"));
            Player playMP3 = new Player(fileInputStream);
            if (batteryStatus.getACLineStatusString().equals("Online") && dti.frame.counter == 1) {
                dti.trayIcon.displayMessage("NORMAL", "The pc connected battery", TrayIcon.MessageType.NONE);
                dti.frame.counter = 0;
            } else if (batteryStatus.getACLineStatusString().equals("Offline") && dti.frame.counter == 0) {
                playMP3.close();
                dti.trayIcon.displayMessage("NORMAL", "The pc isn't connected battery", TrayIcon.MessageType.NONE);
                dti.frame.counter = 1;
            }

            if (batteryStatus.size() < 11 && batteryStatus.getACLineStatusString().equals("Offline") && OfflineCounter10 == 0) {
                playMP3.close();
                dti.trayIcon.displayMessage("WARNING", "The pc battery is Empty " + batteryStatus.size() + "%", TrayIcon.MessageType.WARNING);
                OfflineCounter10 = 1;
            } else if (batteryStatus.size() < 11 && batteryStatus.getACLineStatusString().equals("Online") && OfflineCounter10 == 1) {
                OfflineCounter10 = 0;
            }

            if (batteryStatus.size() == 50 && batteryStatus.getACLineStatusString().equals("Offline") && OfflineCounter50 == 0) {
                playMP3.close();
                dti.trayIcon.displayMessage("INFO", "The pc battery is full half 50%", TrayIcon.MessageType.INFO);
                OfflineCounter50 = 1;
            } else if (batteryStatus.size() == 50 && batteryStatus.getACLineStatusString().equals("Online") && OfflineCounter50 == 1) {
                playMP3.close();
                dti.trayIcon.displayMessage("INFO", "The pc battery is full half 50%", TrayIcon.MessageType.INFO);
                OfflineCounter50 = 0;
            }

            if (batteryStatus.size() >= 100 && batteryStatus.getACLineStatusString().equals("Online") && timer == 5) {
                dti.trayIcon.displayMessage("ERROR", "The pc battery is full 100%", TrayIcon.MessageType.ERROR);
                playMP3.play();

                timer = 0;
            } else {
                playMP3.close();
                timer = 0;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString(), "Battery Charging Alarm Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BatteryJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BatteryJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BatteryJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BatteryJFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>            
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                test ts = new test();
                ts.Run();
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    private void setIconImage() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/img/battery2.png")));
    }

}
